var searchData=
[
  ['sample',['sample',['../group__group-algorithms.html#ga0ba2307e528141f69de2d92e3c878eee',1,'ranges::sample(I first, S last, O out, iter_difference_t&lt; O &gt; const n, Gen &amp;&amp;gen=detail::get_random_engine()) -&gt; sample_result&lt; I, O &gt; requires input_iterator&lt; I &gt; &amp;&amp;sentinel_for&lt; S, I &gt; &amp;&amp;weakly_incrementable&lt; O &gt; &amp;&amp;indirectly_copyable&lt; I, O &gt; &amp;&amp;uniform_random_bit_generator&lt; std::remove_reference_t&lt; Gen &gt;&gt; &amp;&amp;(random_access_iterator&lt; O &gt;||forward_iterator&lt; I &gt;||sized_sentinel_for&lt; S, I &gt;)'],['../group__group-algorithms.html#ga192ae87a73afdb587d4d4f58066ce0b3',1,'ranges::sample(I first, S last, ORng &amp;&amp;out, Gen &amp;&amp;gen=detail::get_random_engine()) -&gt; sample_result&lt; I, safe_iterator_t&lt; ORng &gt;&gt; requires input_iterator&lt; I &gt; &amp;&amp;sentinel_for&lt; S, I &gt; &amp;&amp;weakly_incrementable&lt; iterator_t&lt; ORng &gt;&gt; &amp;&amp;indirectly_copyable&lt; I, iterator_t&lt; ORng &gt;&gt; &amp;&amp;uniform_random_bit_generator&lt; std::remove_reference_t&lt; Gen &gt;&gt; &amp;&amp;(forward_range&lt; ORng &gt;||sized_range&lt; ORng &gt;)&amp;&amp;(random_access_iterator&lt; iterator_t&lt; ORng &gt;&gt;||forward_iterator&lt; I &gt;||sized_sentinel_for&lt; S, I &gt;)'],['../group__group-algorithms.html#ga6699f9e02f0ebcb00a92417eccf6725c',1,'ranges::sample(Rng &amp;&amp;rng, O out, iter_difference_t&lt; O &gt; const n, Gen &amp;&amp;gen=detail::get_random_engine()) -&gt; sample_result&lt; safe_iterator_t&lt; Rng &gt;, O &gt; requires input_range&lt; Rng &gt; &amp;&amp;weakly_incrementable&lt; O &gt; &amp;&amp;indirectly_copyable&lt; iterator_t&lt; Rng &gt;, O &gt; &amp;&amp;uniform_random_bit_generator&lt; std::remove_reference_t&lt; Gen &gt;&gt; &amp;&amp;(random_access_iterator&lt; O &gt;||forward_range&lt; Rng &gt;||sized_range&lt; Rng &gt;)'],['../group__group-algorithms.html#gadc045be30e4c526e3139fc9437082d3b',1,'ranges::sample(IRng &amp;&amp;rng, ORng &amp;&amp;out, Gen &amp;&amp;gen=detail::get_random_engine()) -&gt; sample_result&lt; safe_iterator_t&lt; IRng &gt;, safe_iterator_t&lt; ORng &gt;&gt; requires input_range&lt; IRng &gt; &amp;&amp;range&lt; ORng &gt; &amp;&amp;indirectly_copyable&lt; iterator_t&lt; IRng &gt;, iterator_t&lt; ORng &gt;&gt; &amp;&amp;uniform_random_bit_generator&lt; std::remove_reference_t&lt; Gen &gt;&gt; &amp;&amp;(random_access_iterator&lt; iterator_t&lt; ORng &gt;&gt;||forward_range&lt; IRng &gt;||sized_range&lt; IRng &gt;)&amp;&amp;(forward_range&lt; ORng &gt;||sized_range&lt; ORng &gt;)']]],
  ['search',['search',['../group__group-algorithms.html#ga7be68b3cba4f31a87b846ca0c67bbcd5',1,'ranges::search(I1 begin1, S1 end1, I2 begin2, S2 end2, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; subrange&lt; I1 &gt; requires forward_iterator&lt; I1 &gt; &amp;&amp;sentinel_for&lt; S1, I1 &gt; &amp;&amp;forward_iterator&lt; I2 &gt; &amp;&amp;sentinel_for&lt; S2, I2 &gt; &amp;&amp;indirectly_comparable&lt; I1, I2, C, P1, P2 &gt;'],['../group__group-algorithms.html#ga29228b9cd4dadf9e2d1e335d9d24b0b7',1,'ranges::search(Rng1 &amp;&amp;rng1, Rng2 &amp;&amp;rng2, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; safe_subrange_t&lt; Rng1 &gt; requires forward_range&lt; Rng1 &gt; &amp;&amp;forward_range&lt; Rng2 &gt; &amp;&amp;indirectly_comparable&lt; iterator_t&lt; Rng1 &gt;, iterator_t&lt; Rng2 &gt;, C, P1, P2 &gt;']]],
  ['search_5fn',['search_n',['../group__group-algorithms.html#ga5836a34415b141e5fd23499107ff30f8',1,'ranges::search_n(I first, S last, iter_difference_t&lt; I &gt; cnt, V const &amp;val, C pred=C{}, P proj=P{}) -&gt; subrange&lt; I &gt; requires forward_iterator&lt; I &gt; &amp;&amp;sentinel_for&lt; S, I &gt; &amp;&amp;indirectly_comparable&lt; I, V const *, C, P &gt;'],['../group__group-algorithms.html#ga0187451967b3403c72c0d76a49dd1a13',1,'ranges::search_n(Rng &amp;&amp;rng, iter_difference_t&lt; iterator_t&lt; Rng &gt;&gt; cnt, V const &amp;val, C pred=C{}, P proj=P{}) -&gt; safe_subrange_t&lt; Rng &gt; requires forward_range&lt; Rng &gt; &amp;&amp;indirectly_comparable&lt; iterator_t&lt; Rng &gt;, V const *, C, P &gt;']]],
  ['set_5fdifference',['set_difference',['../group__group-algorithms.html#ga9b5475438384455b8a3041db1e402d0c',1,'ranges::set_difference(I1 begin1, S1 end1, I2 begin2, S2 end2, O out, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; set_difference_result&lt; I1, O &gt; requires sentinel_for&lt; S1, I1 &gt; &amp;&amp;sentinel_for&lt; S2, I2 &gt; &amp;&amp;mergeable&lt; I1, I2, O, C, P1, P2 &gt;'],['../group__group-algorithms.html#gae475cf785478cfed790cfb6c1343e43a',1,'ranges::set_difference(Rng1 &amp;&amp;rng1, Rng2 &amp;&amp;rng2, O out, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; set_difference_result&lt; safe_iterator_t&lt; Rng1 &gt;, O &gt; requires range&lt; Rng1 &gt; &amp;&amp;range&lt; Rng2 &gt; &amp;&amp;mergeable&lt; iterator_t&lt; Rng1 &gt;, iterator_t&lt; Rng2 &gt;, O, C, P1, P2 &gt;']]],
  ['set_5fintersection',['set_intersection',['../group__group-algorithms.html#gabf67b4c645005be8d8131107c31229d7',1,'ranges::set_intersection(I1 begin1, S1 end1, I2 begin2, S2 end2, O out, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; O requires sentinel_for&lt; S1, I1 &gt; &amp;&amp;sentinel_for&lt; S2, I2 &gt; &amp;&amp;mergeable&lt; I1, I2, O, C, P1, P2 &gt;'],['../group__group-algorithms.html#ga16ff3992a9314dcf174835b3a6e05245',1,'ranges::set_intersection(Rng1 &amp;&amp;rng1, Rng2 &amp;&amp;rng2, O out, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; O requires range&lt; Rng1 &gt; &amp;&amp;range&lt; Rng2 &gt; &amp;&amp;mergeable&lt; iterator_t&lt; Rng1 &gt;, iterator_t&lt; Rng2 &gt;, O, C, P1, P2 &gt;']]],
  ['set_5fsymmetric_5fdifference',['set_symmetric_difference',['../group__group-algorithms.html#ga88073b720c6edacdbe45c57d1300f0df',1,'ranges::set_symmetric_difference(I1 begin1, S1 end1, I2 begin2, S2 end2, O out, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; set_symmetric_difference_result&lt; I1, I2, O &gt; requires sentinel_for&lt; S1, I1 &gt; &amp;&amp;sentinel_for&lt; S2, I2 &gt; &amp;&amp;mergeable&lt; I1, I2, O, C, P1, P2 &gt;'],['../group__group-algorithms.html#ga038044a963f0b10fc883cf57ed0b01aa',1,'ranges::set_symmetric_difference(Rng1 &amp;&amp;rng1, Rng2 &amp;&amp;rng2, O out, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; set_symmetric_difference_result&lt; safe_iterator_t&lt; Rng1 &gt;, safe_iterator_t&lt; Rng2 &gt;, O &gt; requires range&lt; Rng1 &gt; &amp;&amp;range&lt; Rng2 &gt; &amp;&amp;mergeable&lt; iterator_t&lt; Rng1 &gt;, iterator_t&lt; Rng2 &gt;, O, C, P1, P2 &gt;']]],
  ['set_5funion',['set_union',['../group__group-algorithms.html#ga1bfb815f6677887dde1caebcae3f700c',1,'ranges::set_union(I1 begin1, S1 end1, I2 begin2, S2 end2, O out, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; set_union_result&lt; I1, I2, O &gt; requires sentinel_for&lt; S1, I1 &gt; &amp;&amp;sentinel_for&lt; S2, I2 &gt; &amp;&amp;mergeable&lt; I1, I2, O, C, P1, P2 &gt;'],['../group__group-algorithms.html#gabb1192300ac92c87a8ff922580465e2d',1,'ranges::set_union(Rng1 &amp;&amp;rng1, Rng2 &amp;&amp;rng2, O out, C pred=C{}, P1 proj1=P1{}, P2 proj2=P2{}) -&gt; set_union_result&lt; safe_iterator_t&lt; Rng1 &gt;, safe_iterator_t&lt; Rng2 &gt;, O &gt; requires range&lt; Rng1 &gt; &amp;&amp;range&lt; Rng2 &gt; &amp;&amp;mergeable&lt; iterator_t&lt; Rng1 &gt;, iterator_t&lt; Rng2 &gt;, O, C, P1, P2 &gt;']]],
  ['shuffle',['shuffle',['../group__group-algorithms.html#ga37626aefc51269d5a1f28edf3993baf4',1,'ranges::shuffle(I const first, S const last, Gen &amp;&amp;gen=detail::get_random_engine()) -&gt; I requires random_access_iterator&lt; I &gt; &amp;&amp;sentinel_for&lt; S, I &gt; &amp;&amp;permutable&lt; I &gt; &amp;&amp;uniform_random_bit_generator&lt; std::remove_reference_t&lt; Gen &gt;&gt; &amp;&amp;convertible_to&lt; invoke_result_t&lt; Gen &amp; &gt;, iter_difference_t&lt; I &gt;&gt;'],['../group__group-algorithms.html#ga93fd2433ca21a7105bf67aca57c4ecad',1,'ranges::shuffle(Rng &amp;&amp;rng, Gen &amp;&amp;rand=detail::get_random_engine()) -&gt; safe_iterator_t&lt; Rng &gt; requires random_access_range&lt; Rng &gt; &amp;&amp;permutable&lt; iterator_t&lt; Rng &gt;&gt; &amp;&amp;uniform_random_bit_generator&lt; std::remove_reference_t&lt; Gen &gt;&gt; &amp;&amp;convertible_to&lt; invoke_result_t&lt; Gen &amp; &gt;, iter_difference_t&lt; iterator_t&lt; Rng &gt;&gt;&gt;']]],
  ['size',['size',['../structmeta_1_1integer__sequence.html#a18dfa3d5844e3dd97fe07e817d238c3c',1,'meta::integer_sequence::size()'],['../structmeta_1_1list.html#a1fc19362369fd9373308b9926beac87d',1,'meta::list::size()'],['../structranges_1_1view__interface.html#af9d7a3d609eb6094831c6a85a79e379c',1,'ranges::view_interface::size() noexcept -&gt; std::size_t requires True &amp;&amp;(Cardinality &gt;=0)'],['../structranges_1_1view__interface.html#a478cf3873c5f373682252f4ad047156d',1,'ranges::view_interface::size() -&gt; detail::iter_size_t&lt; iterator_t&lt; D&lt; True &gt;&gt;&gt; requires True &amp;&amp;(Cardinality&lt; 0) &amp;&amp;sized_sentinel_for&lt; sentinel_t&lt; D&lt; True &gt;&gt;, iterator_t&lt; D&lt; True &gt;&gt;&gt; &amp;&amp;forward_range&lt; D&lt; True &gt;&gt;'],['../structranges_1_1view__interface.html#aa158f065a418676e8e8ce9d03a4e0f29',1,'ranges::view_interface::size() const -&gt; detail::iter_size_t&lt; iterator_t&lt; D&lt; True &gt;&gt;&gt; requires True &amp;&amp;(Cardinality&lt; 0) &amp;&amp;sized_sentinel_for&lt; sentinel_t&lt; D&lt; True &gt; const &gt;, iterator_t&lt; D&lt; True &gt; const &gt;&gt; &amp;&amp;forward_range&lt; D&lt; True &gt; const &gt;']]],
  ['sort',['sort',['../group__group-algorithms.html#ga378358ecf6ab51d495d97b9eccdb2b95',1,'ranges::sort(I first, S end_, C pred=C{}, P proj=P{}) -&gt; I requires sortable&lt; I, C, P &gt; &amp;&amp;random_access_iterator&lt; I &gt; &amp;&amp;sentinel_for&lt; S, I &gt;'],['../group__group-algorithms.html#ga0fda77d6d9ad1a234b712d92c949ea37',1,'ranges::sort(Rng &amp;&amp;rng, C pred=C{}, P proj=P{}) -&gt; safe_iterator_t&lt; Rng &gt; requires sortable&lt; iterator_t&lt; Rng &gt;, C, P &gt; &amp;&amp;random_access_range&lt; Rng &gt;']]],
  ['stable_5fsort',['stable_sort',['../group__group-algorithms.html#ga5ba9e6734e1352d4c0c5ea0f1c7ce3d1',1,'ranges::stable_sort(I first, S end_, C pred=C{}, P proj=P{}) -&gt; I requires sortable&lt; I, C, P &gt; &amp;&amp;random_access_iterator&lt; I &gt; &amp;&amp;sentinel_for&lt; S, I &gt;'],['../group__group-algorithms.html#ga39738e10668ac14c55c17a554ae72a55',1,'ranges::stable_sort(Rng &amp;&amp;rng, C pred=C{}, P proj=P{}) -&gt; safe_iterator_t&lt; Rng &gt; requires sortable&lt; iterator_t&lt; Rng &gt;, C, P &gt; &amp;&amp;random_access_range&lt; Rng &gt;']]],
  ['starts_5fwith',['starts_with',['../group__group-algorithms.html#ga3d2e5f3567c0db685cc20290b2ca0ebe',1,'ranges::starts_with(I1 first1, S1 last1, I2 first2, S2 last2, Comp comp={}, Proj1 proj1={}, Proj2 proj2={}) -&gt; bool requires input_iterator&lt; I1 &gt; &amp;&amp;sentinel_for&lt; S1, I1 &gt; &amp;&amp;input_iterator&lt; I2 &gt; &amp;&amp;sentinel_for&lt; S2, I2 &gt; &amp;&amp;indirectly_comparable&lt; I1, I2, Comp, Proj1, Proj2 &gt;'],['../group__group-algorithms.html#ga762b17eda45efa20b8e7407da1d3a249',1,'ranges::starts_with(R1 &amp;&amp;r1, R2 &amp;&amp;r2, Comp comp={}, Proj1 proj1={}, Proj2 proj2={}) -&gt; bool requires input_range&lt; R1 &gt; &amp;&amp;input_range&lt; R2 &gt; &amp;&amp;indirectly_comparable&lt; iterator_t&lt; R1 &gt;, iterator_t&lt; R2 &gt;, Comp, Proj1, Proj2 &gt;']]],
  ['swap_5franges',['swap_ranges',['../group__group-algorithms.html#gad69ff7f6528c3abe5b01886a10279101',1,'ranges::swap_ranges(I1 begin1, S1 end1, I2 begin2) -&gt; swap_ranges_result&lt; I1, I2 &gt; requires input_iterator&lt; I1 &gt; &amp;&amp;sentinel_for&lt; S1, I1 &gt; &amp;&amp;input_iterator&lt; I2 &gt; &amp;&amp;indirectly_swappable&lt; I1, I2 &gt;'],['../group__group-algorithms.html#gac6c5f3296682ac14499cb0e7c39348ae',1,'ranges::swap_ranges(I1 begin1, S1 end1, I2 begin2, S2 end2) -&gt; swap_ranges_result&lt; I1, I2 &gt; requires input_iterator&lt; I1 &gt; &amp;&amp;sentinel_for&lt; S1, I1 &gt; &amp;&amp;input_iterator&lt; I2 &gt; &amp;&amp;sentinel_for&lt; S2, I2 &gt; &amp;&amp;indirectly_swappable&lt; I1, I2 &gt;']]]
];
